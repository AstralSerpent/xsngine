#
# xsngine SCons project file
# written by Raz0r
#
# options:
#	debug		generate debug information, value 2 also enables optimisations
#	force32		force 32 bit target when on 64 bit machine
#
# example:
#	scons -Q debug=1 force32=1
#
# envvars:
#	MORE_WARNINGS	enable additional warnings (gcc/clang only)
#

debug = int( ARGUMENTS.get( 'debug', 0 ) )
force32 = int( ARGUMENTS.get( 'force32', 0 ) )

def cmp_version( v1, v2 ):
	def normalise( v ):
		import re
		return [int(x) for x in re.sub( r'(\.0+)*$', '', v ).split( '.' )]
	return cmp( normalise( v1 ), normalise( v2 ) )

import platform
plat = platform.system() # Windows or Linux
try:
	bits = int( platform.architecture()[0][:2] ) # 32 or 64
except( ValueError, TypeError ):
	bits = None
arch = None # platform-specific, set manually

# architecture settings, needed for binary names, also passed as a preprocessor definition
if force32:
	bits = 32
if bits == 32:
	if plat == 'Windows':
		arch = 'x86'
	elif plat == 'Linux':
		if platform.machine()[:3] == 'arm':
			arch = 'arm'
		else:
			arch = 'i386'
elif bits == 64:
	if plat == 'Windows':
		arch = 'x64'
	elif plat == 'Linux':
		arch = 'x86_64'

# fatal error if the cpu architecture can't be detected
if arch is None:
	raise Exception( 'could not determine architecture' )
if bits is None:
	raise Exception( 'could not determine architecture width' )

# create the build environment
import os
env = Environment( TARGET_ARCH = arch )
env['CC'] = os.getenv( 'CC' ) or env[ 'CC' ]
env['CXX'] = os.getenv( 'CXX' ) or env[ 'CXX' ]
env['ENV'].update( x for x in os.environ.items() if x[0].startswith( 'CCC_' ) )
if 'TERM' in os.environ:
	env['ENV']['TERM'] = os.environ['TERM']

# prettify the compiler output
import sys
def cc_output( s, target, src, env ):
	if len( src ) > 1:
		sys.stdout.write( '  --> %s\n' % (''.join([str(x) for x in target])) )
	else:
		sys.stdout.write( '  compiling %s\n' % (''.join([str(x) for x in src])) )
env['PRINT_CMD_LINE_FUNC'] = cc_output

# obtain the compiler version
import commands
if plat == 'Windows':
	ccversion = env['MSVC_VERSION']
else:
	status, ccrawversion = commands.getstatusoutput( env['CC'] + ' -dumpversion' )
	ccversion = None if status else ccrawversion

# git revision
status, rawrevision = commands.getstatusoutput( 'git rev-parse HEAD' )
revision = None if status else rawrevision

# set job/thread count
if plat == 'Linux':
	status, num_cores = commands.getstatusoutput( 'cat /proc/cpuinfo | grep processor | wc -l' )
	env.SetOption( 'num_jobs', int(num_cores) * 3 if status == 0 else 1 )

# notify the user of the build configuration
if not env.GetOption( 'clean' ):
	msg = 'Building for ' + plat + ' ' + str(bits) + ' bits (' + env['CC'] + ' ' + ccversion + ', python ' + platform.python_version() + ')'
	if debug:
		msg += ', debug symbols'
	if debug == 0 or debug == 2:
		msg += ', optimised'
	msg += ', x87 fpu' if 'NO_SSE' in os.environ else ', SSE'
	if force32:
		msg += ', forcing 32 bit build'
	msg += ', ' + str(env.GetOption( 'num_jobs' )) + ' threads'
	if revision:
		msg += '\ngit revision: ' + revision
	print( msg )

files = [
	'XSClient/XSClient.cpp',
	'XSClient/XSClientConsole.cpp',
	'XSCommon/XSColours.cpp',
	'XSCommon/XSCommand.cpp',
	'XSCommon/XSCommon.cpp',
	'XSCommon/XSConsole.cpp',
	'XSCommon/XSCvar.cpp',
	'XSCommon/XSEvent.cpp',
	'XSCommon/XSFile.cpp',
	'XSCommon/XSLogger.cpp',
	'XSCommon/XSMessageBuffer.cpp',
	'XSCommon/XSModule.cpp',
	'XSCommon/XSNetAddress.cpp',
	'XSCommon/XSSocket.cpp',
	'XSCommon/XSString.cpp',
	'XSCommon/XSTimer.cpp',
	'XSCommon/XSVector.cpp',
	'XSCrypto/XSMD5.cpp',
	'XSInput/XSInput.cpp',
	'XSInput/XSInputField.cpp',
	'XSInput/XSKeys.cpp',
	'XSRenderer/XSBackend.cpp',
	'XSRenderer/XSBuffer.cpp',
	'XSRenderer/XSFont.cpp',
	'XSRenderer/XSFramebuffer.cpp',
	'XSRenderer/XSImagePNG.cpp',
	'XSRenderer/XSInternalFormat.cpp',
	'XSRenderer/XSMaterial.cpp',
	'XSRenderer/XSMesh.cpp',
	'XSRenderer/XSModel.cpp',
	'XSRenderer/XSRenderable.cpp',
	'XSRenderer/XSRenderCommand.cpp',
	'XSRenderer/XSRenderer.cpp',
	'XSRenderer/XSScreenshot.cpp',
	'XSRenderer/XSShaderProgram.cpp',
	'XSRenderer/XSTexture.cpp',
	'XSRenderer/XSView.cpp',
	'GLEW/glew.c',
]
if plat == 'Linux':
	files += [ 'XSSystem/XSLinux.cpp' ]
elif plat == 'Windows':
	files += [ 'XSSystem/XSWindows.cpp' ]
else:
	error( 'Missing xsngine backend for your platform!')

# set up libraries to link with
if plat == 'Linux':
	libs = [ 'freetype', 'GL', 'm', 'png16', 'SDL2' ]
elif plat == 'Windows':
	# windows libs are in e.g. "../lib/x86/libpng16d.lib" for 32 bit debug build of libpng
	env['LIBPATH'] = '#/../lib/' + arch + '/'
	libs = [ 'OpenGL32', 'SDL2', 'SDL2main', 'freetype250d', 'zlibd', 'libpng16d' ]

# compiler options
env['CPPPATH'] = [ '#', '#/freetype', '#/GLEW', '#/libpng', '#/zlib' ]

# compiler switches
if plat == 'Linux':
	env['CPPDEFINES'] = []
	env['CFLAGS'] = []
	env['CCFLAGS'] = []
	env['CXXFLAGS'] = []

	# c warnings
	env['CFLAGS'] += [ '-Wdeclaration-after-statement', '-Wnested-externs', '-Wold-style-definition',
		'-Wstrict-prototypes'
	]

	# c/cpp warnings
	env['CCFLAGS'] += [ '-Wall', '-Wextra', '-Wno-missing-braces', '-Wno-missing-field-initializers',
		'-Wno-sign-compare', '-Wno-unused-parameter', '-Winit-self', '-Winline', '-Wmissing-include-dirs',
		'-Woverlength-strings', '-Wpointer-arith', '-Wredundant-decls', '-Wundef', '-Wuninitialized', '-Wwrite-strings'
	]

	# strict c/cpp warnings
	if 'MORE_WARNINGS' in os.environ:
		env['CCFLAGS'] += [ '-Waggregate-return', '-Wbad-function-cast', '-Wcast-qual', '-Wdouble-promotion',
			'-Wfloat-equal', '-Wlong-long', '-Wshadow', '-Wsign-conversion', '-Wsuggest-attribute=const',
			'-Wswitch-default', '-Wunreachable-code', '-Wunsuffixed-float-constants'
		]

	# gcc-specific warnings
	if env['CC'] == 'gcc' and arch != 'arm':
		env['CCFLAGS'] += [ '-Wlogical-op' ]

		# requires gcc 4.7 or above
		if cmp_version( ccversion, '4.7' ) >= 0:
			env['CCFLAGS'] += [ '-Wstack-usage=32768' ]

	# disable warnings
	env['CCFLAGS'] += [ '-Wno-char-subscripts' ]

	# c/cpp flags
	if arch == 'arm':
		env['CCFLAGS'] += [ '-fsigned-char' ]
	else:
		env['CCFLAGS'] += [ '-mstackrealign' ]
		if 'NO_SSE' in os.environ:
			env['CCFLAGS'] += [ '-mfpmath=387', '-mno-sse2', '-ffloat-store' ]
			if env['CC'] == 'gcc':
				env['CCFLAGS'] += [ '-fexcess-precision=standard' ]
		else:
			env['CCFLAGS'] += [ '-mfpmath=sse', '-msse2' ]
		if arch == 'i386':
			env['CCFLAGS'] += [ '-m32', '-march=i686' ]
			env['LINKFLAGS'] += [ '-m32' ]
		elif arch == 'x86_64':
			env['CCFLAGS'] += [ '-mtune=generic' ]
	env['CCFLAGS'] += [ '-fvisibility=hidden', '-fomit-frame-pointer' ]

	# c flags
	env['CFLAGS'] += [ '-std=gnu99' ]

	# c++ flags
	env['CXXFLAGS'] += [ '-fvisibility-inlines-hidden', '-std=c++11' ]

elif plat == 'Windows':
	# assume msvc
	env['CFLAGS'] = [ '/TC' ]
	env['CCFLAGS'] = [ '/nologo', '/W4', '/WX-', '/GS', '/fp:precise', '/Zc:wchar_t', '/Zc:forScope', '/Gd', '/GF', '/errorReport:prompt', '/EHs', '/EHc', '/Ot', '/Zi' ]
	env['LINKFLAGS'] = [ '/SUBSYSTEM:WINDOWS', '/MACHINE:'+arch, '/LTCG' ]
	env['CPPDEFINES'] = [ '_MSC_EXTENSIONS', '_INTEGRAL_MAX_BITS=64', '_WIN32', '_MT', '_M_FP_PRECISE' ]
	if bits == 32:
		env['CCFLAGS'] += [ '/analyze-', '/Zp8', '/Gs', '/Oy-' ]
		env['CPPDEFINES'] += [ '_M_IX86=600', '_M_IX86_FP=2' ]
	elif bits == 64:
		env['CCFLAGS'] += [ '/Zp16' ]
		env['CPPDEFINES'] += [ '_M_AMD64=100', '_M_X64=100', '_WIN64' ]

# debug / release
if debug == 0 or debug == 2:
	if plat == 'Linux':
		env['CCFLAGS'] += [ '-O3' ]
		if debug == 0:
			env['LINKFLAGS'] += [ '-s' ]
	elif plat == 'Windows':
		env['CCFLAGS'] += [ '/GL', '/Gm-', '/MD', '/O2', '/Oi' ]
		if bits == 64:
			env['CCFLAGS'] += [ '/Oy' ]
	if debug == 0:
		env['CPPDEFINES'] += [ 'NDEBUG' ]
if debug:
	if plat == 'Linux':
		env['CCFLAGS'] += [ '-g3' ]
	elif plat == 'Windows':
		env['CPPDEFINES'] += [ '__MSVC_RUNTIME_CHECKS' ]
		env['CCFLAGS'] += [ '/Gm', '/FD', '/MDd', '/Od', '/RTC1', '/RTCs', '/RTCu' ]
		if bits == 32:
			env['CCFLAGS'] += [ '/FC', '/ZI' ]
	env['CPPDEFINES'] += [ '_DEBUG' ]

if revision:
	env['CPPDEFINES'] += [ 'REVISION=\\"' + revision + '\\"' ]

env['CPPDEFINES'] += [ 'GLEW_STATIC', 'SCONS_BUILD' ]

# arch width
env['CPPDEFINES'] += [ 'ARCH_WIDTH='+str(bits), 'ARCH_STRING=\\"'+arch+'\\"' ]

# set up the build directory
if debug == 1:
	configuration = 'debug'
elif debug == 2:
	configuration = 'optimised-debug'
else:
	configuration = 'release'

build_dir = 'build' + '/' + configuration + '/' + env['CC'] + '/' + str(bits) + '/'
env.VariantDir( build_dir, '.', duplicate = 0 )
files = [build_dir + f for f in files]

# libraries
libraries = [
	'XSClient'
]
env['LIBS'] = [
	env.SConscript(
		'#/' + lib + '/SConscript',
		exports = [ 'arch', 'bits', 'build_dir', 'configuration', 'env', 'plat' ]
	) for lib in libraries
]
env['LIBS'] += libs
env['LIBPREFIX'] = ''

# targets
env.Program( 'xsn' + '.' + arch + env['PROGSUFFIX'], files )
