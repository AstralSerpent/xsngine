#
# xsngine SCons project file
# written by Raz0r
#
# options:
#	debug		generate debug information
#	force32		force 32 bit target when on 64 bit machine
#	analyse		run static analysis
#
# example:
#	scons debug=1 force32=1
#

import platform
import os
import commands

plat = platform.system() # Windows or Linux
try:
	bits = int( platform.architecture()[0][:2] ) # 32 or 64
except (ValueError, TypeError):
	bits = None
arch = None # platform-specific, set manually

print( 'Configuring build environment...' )

analyse = int( ARGUMENTS.get( 'analyse', 0 ) )
compiler = ARGUMENTS.get( 'compiler', 'gcc' )
debug = int( ARGUMENTS.get( 'debug', 0 ) )
force32 = int( ARGUMENTS.get( 'force32', 0 ) )

# architecture settings, needed for binary names, also passed as a preprocessor definition
if force32:
	bits = 32

if bits == 32:
	if plat == 'Windows':
		arch = 'x86'
	elif plat == 'Linux':
		arch = 'i386'
	#TODO: Mac

elif bits == 64:
	if plat == 'Windows':
		arch = 'x64'
	elif plat == 'Linux':
		arch = 'x86_64'
	#TODO: Mac

# Notify the user of the build configuration
print( 'Building for ' + plat + ' (' + str(bits) + ' bits, treated as \'' + arch + '\')' )
if debug:
	print( 'With debugging symbols' )
if not debug or debug == 2:
	print( 'Optimisation enabled' )
if force32:
	print( 'Forcing 32 bit compile' )
if analyse:
	print( 'WARNING: Running static analysis mode. Will not produce binaries' )
print( '' )

env = Environment()
if plat != 'Windows':
	env['ENV']['TERM'] = os.environ['TERM']

files = [ 'XSClient/XSClient.cpp', 'XSClient/XSInput.cpp', 'XSClient/XSKeys.cpp',
	'XSCommon/XSColours.cpp', 'XSCommon/XSCommand.cpp', 'XSCommon/XSCommon.cpp', 'XSCommon/XSConsole.cpp',
	'XSCommon/XSCvar.cpp', 'XSCommon/XSEvent.cpp', 'XSCommon/XSFile.cpp', 'XSCommon/XSString.cpp',
	'GLee/GLee.c', 'XSRenderer/XSBackend.cpp', 'XSRenderer/XSFont.cpp', 'XSRenderer/XSFramebuffer.cpp',
	'XSRenderer/XSImagePNG.cpp', 'XSRenderer/XSInternalFormat.cpp', 'XSRenderer/XSRenderCommand.cpp',
	'XSRenderer/XSRenderer.cpp', 'XSRenderer/XSShaderProgram.cpp', 'XSRenderer/XSTexture.cpp', 'XSRenderer/XSView.cpp' ]

# set up libraries to link with
if plat == 'Linux':
	libs = [ 'freetype', 'GL', 'm', 'png12', 'SDL2' ]
elif plat == 'Windows':
	# windows libs are in e.g. "../lib/x86/libpng16d.lib" for 32 bit debug build of libpng
	env['LIBPATH'] = '#/../lib/' + arch + '/'
	libs = [ 'OpenGL32', 'SDL2', 'SDL2main', 'freetype250d', 'zlibd', 'libpng16d' ]

# compiler options
env['CPPPATH'] = [ '.', './freetype/' ]
if plat == 'Windows':
	env['CPPPATH'] = [ './libpng/', './zlib/' ]

# tool-specific flags
if plat == 'Linux':
	env['CC'] = compiler
	env['CFLAGS'] = [ '-Wdeclaration-after-statement',
		'-Wnested-externs',
		'-Wold-style-definition',
		'-Wstrict-prototypes' ]
	env['CXXFLAGS'] = [ '-std=c++11' ]
	env['CPPDEFINES'] = [ '__GCC__' ]
	env['CCFLAGS'] = [ '-msse3',
		'-Wall', '-Wextra',
		'-Wno-char-subscripts',
		'-Wno-missing-braces',
		'-Wno-missing-field-initializers',
		'-Wno-sign-compare',
		'-Wno-unused-parameter',
	#	'-Waggregate-return',
	#	'-Wbad-function-cast',
	#	'-Wcast-qual',
	#	'-Wdouble-promotion',
	#	'-Wfloat-equal',
		'-Winit-self',
		'-Winline',
		'-Wlogical-op',
	#	'-Wlong-long',
		'-Wmissing-include-dirs',
		'-Woverlength-strings',
		'-Wpointer-arith',
		'-Wredundant-decls',
	#	'-Wshadow',
	#	'-Wsign-conversion',
		'-Wstack-usage=32768',
	#	'-Wsuggest-attribute=const',
	#	'-Wswitch-default',
		'-Wundef',
		'-Wuninitialized',
		'-Wunreachable-code',
	#	'-Wunsuffixed-float-constants',
		'-Wwrite-strings',
		]
	if analyse:
		env['CC'] = 'clang'
		env['CXX'] = 'clang++'
		env['CCFLAGS'] += [ '--analyze -O3' ]
	if force32:
		env['CCFLAGS'] += [ '-m32' ]
		env['LINKFLAGS'] += [ '-m32' ]
elif plat == 'Windows':
	# assume msvc
	env['CFLAGS'] = [ '/TC' ]
	env['CCFLAGS'] = [ '/nologo', '/W4', '/WX-', '/GS', '/fp:precise', '/Zc:wchar_t', '/Zc:forScope', '/Gd', '/GF', '/errorReport:prompt', '/EHs', '/EHc', '/Ot', '/Zi' ]
	env['LINKFLAGS'] = [ '/SUBSYSTEM:WINDOWS', '/MACHINE:'+arch, '/LTCG' ]
	env['CPPDEFINES'] = [ '_MSC_EXTENSIONS', '_INTEGRAL_MAX_BITS=64', '_WIN32', '_MT', '_M_FP_PRECISE' ]
	if bits == 32:
		env['CCFLAGS'] += [ '/analyze-', '/Zp8', '/Gs', '/Oy-' ]
		env['CPPDEFINES'] += [ '_M_IX86=600', '_M_IX86_FP=2' ]
	elif bits == 64:
		env['CCFLAGS'] += [ '/Zp16' ]
		env['CPPDEFINES'] += [ '_M_AMD64=100', '_M_X64=100', '_WIN64' ]

# debug / release
if not debug or debug == 2:
	if plat == 'Linux' and not analyse:
		env['CCFLAGS'] += [ '-O2' ] # analysis sets higher optimisation level
	elif plat == 'Windows':
		env['CCFLAGS'] += [ '/GL', '/Gm-', '/MD', '/O2', '/Oi' ]
		if bits == 64:
			env['CCFLAGS'] += [ '/Oy' ]
	if not debug:
		env['CPPDEFINES'] += [ 'NDEBUG' ]
if debug:
	if plat == 'Linux':
		env['CCFLAGS'] += [ '-g3' ]
	elif plat == 'Windows':
		env['CCFLAGS'] += [ '/Gm', '/FD', '/MDd', '/Od', '/RTC1', '/RTCs', '/RTCu' ]
		if bits == 32:
			env['CCFLAGS'] += [ '/FC', '/ZI' ]
	env['CPPDEFINES'] += [ '_DEBUG', '__MSVC_RUNTIME_CHECKS' ]

# get git revision
status, rev = commands.getstatusoutput( 'git rev-parse HEAD' )
if status == 0:
	env['CPPDEFINES'] += [ 'REVISION=\\"'+rev+'\\"' ]

# arch width
env['CPPDEFINES'] += [ 'ARCH_WIDTH='+str(bits), 'ARCH_STRING=\\"'+arch+'\\"' ]

# targets
env['LIBS'] = libs
env['LIBPREFIX'] = ''
env.Program( 'xsn'+'.'+arch+env['PROGSUFFIX'], files )
