#
# xsngine SCons project file
# written by Raz0r
#
# options:
#	debug		generate debug information
#	force32		force 32 bit target when on 64 bit machine
#	analyse		run static analysis
#
# example:
#	scons debug=1 force32=1
#

import platform
import os

plat = platform.system() # Windows or Linux
try:
	bits = int( platform.architecture()[0][:2] ) # 32 or 64
except (ValueError, TypeError):
	bits = None
arch = None # platform-specific, set manually

print( '\n********************************\n' )
print( 'Configuring build environment...' )
env = Environment()

env['ENV']['TERM'] = os.environ['TERM']

analyse = int( ARGUMENTS.get( 'analyse', 0 ) )
force32 = int( ARGUMENTS.get( 'force32', 0 ) )
if force32:
	bits = 32

if bits == 32:
	if plat == 'Windows':
		arch = 'x86'
	elif plat == 'Linux':
		arch = 'i386'
	#TODO: Mac

elif bits == 64:
	if plat == 'Windows':
		arch = 'x64'
	elif plat == 'Linux':
		arch = 'x86_64'
	#TODO: Mac

print( 'Building for ' + plat + ' (' + str(bits) + ' bits, treated as \'' + arch + '\')' )
print( '\n********************************\n' )

# files: client
files  = [ 'XSClient/XSClient.cpp', 'XSClient/XSInput.cpp', 'XSClient/XSKeys.cpp' ]
# files: common
files += [ 'XSCommon/XSColours.cpp', 'XSCommon/XSCommand.cpp', 'XSCommon/XSCommon.cpp', 'XSCommon/XSConsole.cpp',
	'XSCommon/XSCvar.cpp', 'XSCommon/XSEvent.cpp', 'XSCommon/XSFile.cpp', 'XSCommon/XSString.cpp' ]
# files: renderer
files += [ 'GLee/GLee.c', 'XSRenderer/XSBackend.cpp', 'XSRenderer/XSFont.cpp', 'XSRenderer/XSFramebuffer.cpp',
	'XSRenderer/XSImagePNG.cpp', 'XSRenderer/XSInternalFormat.cpp', 'XSRenderer/XSRenderCommand.cpp',
	'XSRenderer/XSRenderer.cpp', 'XSRenderer/XSShaderProgram.cpp', 'XSRenderer/XSTexture.cpp', 'XSRenderer/XSView.cpp' ]

# set up libraries to link with
if plat == 'Linux':
	libs = [ 'freetype', 'GL', 'm', 'png12', 'SDL2' ]
elif plat == 'Windows':
	# windows libs are in e.g. "../lib/x86/libpng16d.lib" for 32 bit debug build of libpng
	env['LIBPATH'] = '#/../lib/' + arch + '/'
	libs = [ 'OpenGL32', 'SDL2', 'SDL2main', 'freetype250d', 'zlibd', 'libpng16d' ]

# compiler options
env['CPPPATH'] = [ '.', './freetype/' ]
if plat == 'Windows':
	env['CPPPATH'] = [ './libpng/', './zlib/' ]
env['CPPDEFINES'] = [ 'XS_ARCH_WIDTH='+str(bits), 'ARCH_STRING=\\"'+arch+'\\"' ]

# tool-specific flags
if plat == 'Linux':
	# assume gcc/g++
	env['CFLAGS'] = [ '-Wstrict-prototypes' ]
	env['CXXFLAGS'] = [ '-std=c++11' ]
	env['CCFLAGS'] += [ '-msse3',
		'-Wall', '-Wextra',
		'-Wno-char-subscripts',
	#	'-Waggregate-return',
	#	'-Wfloat-equal',
		'-Winit-self',
	#	'-Wshadow',
	#	'-Wswitch-default',
		'-Wuninitialized',
		'-Wunreachable-code',
	#	'-Wwrite-strings',
		]
	if analyse:
		env['CC'] = 'clang'
		env['CXX'] = 'clang++'
		env['CCFLAGS'] += [ '--analyze' ]
	if force32:
		env['CCFLAGS'] += [ '-m32' ]
		env['LINKFLAGS'] += [ '-m32' ]
elif plat == 'Windows':
	# assume msvc
	env['CCFLAGS'] = [ '/Gm', '/GS', '/Zc:wchar_t', '/WX-', '/RTC1', '/MDd', '/EHsc', '/nologo', '/W4', '/wd"4100"', '/wd"4127"', '/wd"4996"' ]
	env['LINKFLAGS'] = [ '/SUBSYSTEM:WINDOWS','/MACHINE:'+arch ]
	env['CPPDEFINES'] += [ '_CRT_SECURE_NO_WARNINGS', 'WIN32', '_WINDOWS' ]

# debug / release
if int( ARGUMENTS.get( 'debug', 0 ) ):
	if plat == 'Linux':
		env['CCFLAGS'] += [ '-g3' ]
	elif plat == 'Windows':
		env['CCFLAGS'] += [ '/Zi', '/Od' ]
	env['CPPDEFINES'] += [ '_DEBUG' ]
else:
	if plat == 'Linux':
		env['CCFLAGS'] += [ '-O2' ]
	elif plat == 'Windows':
		env['CCFLAGS'] += [ '/O2' ]
	env['CPPDEFINES'] += [ 'NDEBUG' ]

# # # # # # # # #
#    TARGETS    #
# # # # # # # # #

# client / all
env['LIBS'] = libs
env['LIBPREFIX'] = ''
env.Program( 'xsn'+'.'+arch+env['PROGSUFFIX'], files )
