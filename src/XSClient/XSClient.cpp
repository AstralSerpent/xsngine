#include <stack>

#include "XSCommon/XSCommon.h"
#include "XSCommon/XSError.h"
#include "XSCommon/XSString.h"
#include "XSCommon/XSCvar.h"
#include "XSCommon/XSConsole.h"
#include "XSCommon/XSVector.h"
#include "XSCommon/XSTimer.h"
#include "XSCommon/XSGlobals.h"
#include "XSCommon/XSEvent.h"
#include "XSClient/XSClient.h"
#include "XSClient/XSClientGame.h"
#include "XSClient/XSClientConsole.h"
#include "XSClient/XSMenuManager.h"
#include "XSClient/XSTerrain.h"
#include "XSInput/XSInput.h"
#include "XSInput/XSMouse.h"
#include "XSInput/XSKeys.h"
#include "XSRenderer/XSFont.h"
#include "XSRenderer/XSView.h"

namespace XS {

	namespace Client {

		ClientState state = {};
		uint64_t frameNum = 0u;

		// hud
		static Renderer::View *hudView = nullptr;

		// menus
		MenuManager *menu = nullptr;

		// console input
		ClientConsole *clientConsole = nullptr;

		void Cmd_ToggleConsole( const CommandContext * const context ) {
			if ( !clientConsole ) {
				throw XSError( "Tried to toggle client console without a valid instance" );
			}

			clientConsole->Toggle();
		}

		void Cmd_OpenMenu( const CommandContext * const context ) {
			menu->OpenMenu( (*context)[0].c_str() );
		}

		static void RegisterCommands( void ) {
			Command::AddCommand( "openMenu", Cmd_OpenMenu );
		}

		bool MouseMotionEvent( const struct MouseMotionEvent &ev ) {
			if ( menu->isOpen ) {
				menu->MouseMotionEvent( ev );
				return true;
			}
			return false;
		}

		bool MouseButtonEvent( const struct MouseButtonEvent &ev ) {
			if ( menu->isOpen ) {
				menu->MouseButtonEvent( ev );
				return true;
			}
			return false;
		}

		void KeyboardEvent( const struct KeyboardEvent &ev ) {
			// hardcoded console short-circuit
			if ( clientConsole ) {
				if ( ev.down && ev.key == SDLK_BACKQUOTE ) {
					clientConsole->Toggle();
					return;
				}
				else if ( clientConsole->KeyboardEvent( ev ) ) {
					return;
				}
			}

			// let the menu consume key events
			if ( menu->isOpen ) {
				menu->KeyboardEvent( ev );
				return;
			}

			// fall through to gamecode
			keystate[ev.key] = ev.down;
			ExecuteBind( ev );
		}

		void Init( void ) {
			RegisterCommands();

			// hud
			hudView = new Renderer::View( 0u, 0u, true );
			menu = new MenuManager();
			menu->RegisterMenu( "menus/settings.xmenu" );
		//	menu->OpenMenu( "settings" );

			// console
			clientConsole = new ClientConsole( &console );

			// client game module
			ClientGame::Init();
		}

		void Shutdown( void ) {
			delete clientConsole;
			delete hudView;
		}

		void NetworkPump( real64_t dt ) {
			Input::GenerateMovementCommand( dt );
		}

		void RunFrame( real64_t dt ) {
			static real64_t stepTime = 0.0;
			frameNum++;

			// previousState = currentState;
			// integrate( currentState, stepTime, dt );
			stepTime += dt;

			// process server updates
			// simulate local entities
			//	predict entities whose state is not managed by the server, created by either the client or server
			//	e.g. client may create its own projectiles until the server overrides it
			// movement prediction (movement commands have been generated by input poll)
			ClientGame::RunFrame( dt );
		}

		// lazy initialise on first request per frame
		real64_t GetElapsedTime( TimerResolution resolution ) {
			static uint64_t lastFrame = 0u;
			static real64_t timeSec = 0.0;
			static real64_t timeMsec = 0.0;
			static real64_t timeUsec = 0.0;
			if ( lastFrame != frameNum ) {
				lastFrame = frameNum;
				timeUsec = Common::gameTimer->GetTiming();
				timeMsec = timeUsec * 0.001;
				timeSec = timeUsec * 0.000001;
			}

			switch( resolution ) {

				case TimerResolution::Seconds: {
					return timeSec;
				} break;

				case TimerResolution::Milliseconds: {
					return timeMsec;
				} break;

				case TimerResolution::Microseconds: {
					return timeUsec;
				} break;

				default: {
					return 0.0;
				} break;
			}
		}

		static void DrawFPS( real64_t frametime, Renderer::Font *font ) {
			static const uint32_t numSamples = 64u;
			static real64_t samples[numSamples];
			static uint32_t index = 0;
			samples[index++] = frametime;
			if ( index >= numSamples ) {
				index = 0u;
			}
			real64_t avg = 0.0;
			for ( uint32_t i = 0; i < numSamples; i++ ) {
				avg += samples[i];
			}
			avg /= static_cast<real64_t>( numSamples );

			std::string fpsText = String::Format( "FPS:%.0f", 1000.0 / avg ).c_str();
			const uint16_t fpsTextSize = 16u;
			real32_t textWidth = 2.0f;
			for ( const char *p = fpsText.c_str(); *p; p++ ) {
				textWidth += font->GetGlyphWidth( *p, fpsTextSize );
			}

			vector2 pos(
				Renderer::state.window.width - textWidth,
				0.0f
			);
			font->Draw( pos, fpsText, fpsTextSize );
		}

		static void DrawMenus( Renderer::Font *font ) {
			if ( menu->isOpen ) {
				menu->PaintMenus();
				menu->DrawCursor();
			}
		}

		static void DrawDebugInfo( Renderer::Font *font ) {
			std::string fovText = String::Format( "fov: %.03f", ClientGame::cg_fov->GetReal32() ).c_str();
			const uint16_t fovTextSize = 16u;
			real32_t textWidth = 0.0f;
			for ( const char *p = fovText.c_str(); *p; p++ ) {
				textWidth += font->GetGlyphWidth( *p, fovTextSize );
			}

			vector2 pos(
				2.0f,
				0.0f
			);
			font->Draw( pos, fovText, fovTextSize );
		}

		static void DrawHUD( real64_t frametime ) {
			if ( !hudView ) {
				return;
			}

			hudView->Bind();

			static Renderer::Font *font = nullptr;
			if ( !font ) {
				font = Renderer::Font::Register( "menu" );
			}

			DrawFPS( frametime, font );

			DrawMenus( font );

			DrawDebugInfo( font );
		}

		void DrawFrame( real64_t frametime ) {
			// draw game view
			ClientGame::DrawFrame();

			// draw HUD
			DrawHUD( frametime );

			// draw console
			clientConsole->Draw();
		}

	} // namespace Client

} // namespace XS
