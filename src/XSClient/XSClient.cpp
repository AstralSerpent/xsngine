#include "XSSystem/XSInclude.h"
#include "XSSystem/XSPlatform.h"

#include "SDL2/SDL_keycode.h"
#include "SDL2/SDL_loadso.h"

#include "XSCommon/XSCommon.h"
#include "XSCommon/XSCommand.h"
#include "XSCommon/XSConsole.h"
#include "XSCommon/XSFile.h"
#include "XSCommon/XSCvar.h"
#include "XSCommon/XSError.h"
#include "XSCommon/XSString.h"
#include "XSClient/XSKeys.h"

namespace XS {

	namespace Client {

		static uint64_t frameNum = 0u;

		typedef const char * (*initFunc_t)(uint32_t);
		#define MODULE_NAME "client" ARCH_STRING DLL_EXT
		static const uint32_t MODULE_VERSION = 1u;
		void *moduleHandle = NULL;

		void Init( void ) {
#if 0
			// initialise the client library
			char modulePath[XS_MAX_FILENAME];
			File::GetFullPath( MODULE_NAME, modulePath, sizeof( modulePath ) );
			moduleHandle = SDL_LoadObject( modulePath );
			if ( !moduleHandle ) {
				throw( XSError( "Could not find client module (" MODULE_NAME ")" ) );
				return;
			}

			if ( initFunc_t init = (initFunc_t)SDL_LoadFunction( moduleHandle, "LoadModule" ) ) {
				const char *msg = init( MODULE_VERSION );
				if ( msg ) {
					throw( XSError( msg ) );
				}
			}
			else {
				throw( XSError( "Could not load client module (" MODULE_NAME ")" ) );
			}
#endif
		}

		void Shutdown( void ) {
			if ( moduleHandle ) {
				SDL_UnloadObject( moduleHandle );
			}
		}

		void NetworkPump( void ) {
			// create game context from any server updates we receieved since the last frame
		}

		void RunFrame( double dt ) {
			static double stepTime = 0.0;
			frameNum++;

			// previousState = currentState;
			// integrate( currentState, stepTime, dt );
			stepTime += dt;

			// process server updates
			// simulate local entities
			//	predict entities whose state is not managed by the server, created by either the client or server
			//	e.g. client may create its own projectiles until the server overrides it
			// movement prediction (movement commands have been generated by input poll)
		}

		void DrawFrame( double frametime ) {
			// draw game view
			// draw HUD

			// draw console
			Console::Display();
		}

	} // namespace Client

} // namespace XS
