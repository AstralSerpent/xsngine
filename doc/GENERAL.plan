what does do about sound backend?? THIS IS BROKEN - openalsoft, sdl2
networking: RakNet, client/server architecture. see NETWORKING.plan
video - bother at all? theora+vorbis
scripting - necessary? just use native code. if anything, JIT

execution overview:
	primarily a many-to-one client->server architecture
	each server frame will run multiple discrete time steps (see: Fix Your Timestep by Glenn Fielder)
	at the end of each server frame, it will generate a snapshot/state of the world which is networked to clients)
		if you wish to run a local game, the server will skip its networking step for you and copy it to an intermediate
		buffer that the client can treat as a network stream
	client receives gamestate, and lerps between the last-known 2 states, producing a frame to render
		extrapolation/prediction is avoided due to errors; state is non-deterministic
		this approach incurs rendering latency of at-least serverFramerate + ping

MAIN LOOP
	input poll
		queue events
		generate keystates
		generate movement commands
	pump events (key events...)
	execute command buffer

	run server frame
	pump server networking (snapshots)
	pump events (nothing at the moment)
	execute buffer (server frame may have appended commands)

	pump client networking (movement commands)
		1 movement command per client frame

	run client frame (following client-as-terminal ideology - inspect one frame lag issues)
		process server updates
		simulate local entities
		movement prediction (movement commands have been generated)
		draw game view
			set up renderer view (3d) and queue render commands
		draw HUD
			set up hud view (2d) and queue render commands
		draw console (move this out of client? maybe server should just use stdin/stdout, curses if available)
			set up console view, or hijack hud/overlay view?
			queue render commands

	foreach view
		bind framebuffer
		pre-render (camera transform etc)
		foreach command
			execute
		post-render (post effects)
